#!/usr/bin/env python

# for proper daemonization, see
# https://github.com/seb-m/pyinotify/blob/master/python2/examples/daemon.py

# built from https://github.com/seb-m/pyinotify/wiki/List-of-Examples

import pyinotify
import re
import serial
import sys
import os
import time
from os import listdir
from os.path import isfile, join


class Handler(pyinotify.ProcessEvent):

    def __init__(self, watch_dir, port):
        self.watch_dir = watch_dir
        self.port = port

    def watch(self):
        wm = pyinotify.WatchManager()
        mask = pyinotify.IN_CLOSE_WRITE | pyinotify.IN_DELETE
        wm.add_watch(watch_dir, mask, rec = True)
        notifier = pyinotify.Notifier(wm, handler, read_freq=1)
        notifier.coalesce_events()
        notifier.loop()

    def open_serial(self):
        try:
            self.ser = serial.Serial(self.port, 9600, timeout=10)
        except serial.serialutil.SerialException, e:
            print "Error connecting: " + str(e)
            sys.exit(1)
        line = self.ser.readline()
        print line

    def init_state(self):
        """Process the current state of the watched directory."""
        files = [ f for f in listdir(self.watch_dir) if isfile(join(self.watch_dir,f)) and self.numberfile(join(self.watch_dir,f)) ]
        for f in files:
            num = self.numberfile(join(self.watch_dir,f))
            if num:
                print "existing file: " + f
                self.command(num.group(1), "on")

    def process_IN_CLOSE_WRITE(self, event):
        """Called after creation and update finish."""
        num = self.numberfile(event.pathname)
        if num:
            self.command(num.group(1), "on")

    def process_IN_DELETE(self, event):
        num = self.numberfile(event.pathname)
        if num:
            self.command(num.group(1), "off")

    def numberfile(self, path):
        return re.match(r".*/([1-8])$", path)

    def command(self, num, cmd):
        allcmd = "{} {}".format(num, cmd)
        print allcmd
        try:
            self.ser.write(allcmd)
            print self.ser.readline()
        except serial.serialutil.SerialException, e:
            print "Error sending command ({}): attempting serial reconnect".format(e)
            self.open_serial()



if __name__ == '__main__':
    if len(sys.argv) < 1:
        print >> sys.stderr, "Command line error: missing argument(s)."
        sys.exit(1)

    serial_port = sys.argv[1]

    if len(sys.argv) > 2:
        watch_dir = sys.argv[2]
    else:
        watch_dir = '/var/run/blink8/'

    if not os.path.isdir(watch_dir):
        print >> sys.stderr, "Watch directory not found: " + watch_dir
        sys.exit(1)

    print "watching {} sending via {}".format(watch_dir, serial_port)

    handler = Handler(watch_dir, serial_port)
    handler.open_serial()
    handler.init_state()
    handler.watch()
